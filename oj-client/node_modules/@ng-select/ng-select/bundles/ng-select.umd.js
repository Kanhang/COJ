(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/operators'), require('rxjs'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ng-select/ng-select', ['exports', '@angular/core', '@angular/common', 'rxjs/operators', 'rxjs', '@angular/forms'], factory) :
    (factory((global['ng-select'] = global['ng-select'] || {}, global['ng-select']['ng-select'] = {}),global.ng.core,global.ng.common,global.rxjs.operators,global.rxjs,global.ng.forms));
}(this, (function (exports,i0,common,operators,rxjs,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgOptionTemplateDirective = /** @class */ (function () {
        function NgOptionTemplateDirective(template) {
            this.template = template;
        }
        NgOptionTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-option-tmp]' },] }
        ];
        /** @nocollapse */
        NgOptionTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgOptionTemplateDirective;
    }());
    var NgOptgroupTemplateDirective = /** @class */ (function () {
        function NgOptgroupTemplateDirective(template) {
            this.template = template;
        }
        NgOptgroupTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-optgroup-tmp]' },] }
        ];
        /** @nocollapse */
        NgOptgroupTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgOptgroupTemplateDirective;
    }());
    var NgLabelTemplateDirective = /** @class */ (function () {
        function NgLabelTemplateDirective(template) {
            this.template = template;
        }
        NgLabelTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-label-tmp]' },] }
        ];
        /** @nocollapse */
        NgLabelTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgLabelTemplateDirective;
    }());
    var NgMultiLabelTemplateDirective = /** @class */ (function () {
        function NgMultiLabelTemplateDirective(template) {
            this.template = template;
        }
        NgMultiLabelTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-multi-label-tmp]' },] }
        ];
        /** @nocollapse */
        NgMultiLabelTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgMultiLabelTemplateDirective;
    }());
    var NgHeaderTemplateDirective = /** @class */ (function () {
        function NgHeaderTemplateDirective(template) {
            this.template = template;
        }
        NgHeaderTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-header-tmp]' },] }
        ];
        /** @nocollapse */
        NgHeaderTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgHeaderTemplateDirective;
    }());
    var NgFooterTemplateDirective = /** @class */ (function () {
        function NgFooterTemplateDirective(template) {
            this.template = template;
        }
        NgFooterTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-footer-tmp]' },] }
        ];
        /** @nocollapse */
        NgFooterTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgFooterTemplateDirective;
    }());
    var NgNotFoundTemplateDirective = /** @class */ (function () {
        function NgNotFoundTemplateDirective(template) {
            this.template = template;
        }
        NgNotFoundTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-notfound-tmp]' },] }
        ];
        /** @nocollapse */
        NgNotFoundTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgNotFoundTemplateDirective;
    }());
    var NgTypeToSearchTemplateDirective = /** @class */ (function () {
        function NgTypeToSearchTemplateDirective(template) {
            this.template = template;
        }
        NgTypeToSearchTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-typetosearch-tmp]' },] }
        ];
        /** @nocollapse */
        NgTypeToSearchTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgTypeToSearchTemplateDirective;
    }());
    var NgLoadingTextTemplateDirective = /** @class */ (function () {
        function NgLoadingTextTemplateDirective(template) {
            this.template = template;
        }
        NgLoadingTextTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-loadingtext-tmp]' },] }
        ];
        /** @nocollapse */
        NgLoadingTextTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgLoadingTextTemplateDirective;
    }());
    var NgTagTemplateDirective = /** @class */ (function () {
        function NgTagTemplateDirective(template) {
            this.template = template;
        }
        NgTagTemplateDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[ng-tag-tmp]' },] }
        ];
        /** @nocollapse */
        NgTagTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return NgTagTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ConsoleService = /** @class */ (function () {
        function ConsoleService() {
        }
        /**
         * @param {?} message
         * @return {?}
         */
        ConsoleService.prototype.warn = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                console.warn(message);
            };
        ConsoleService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ ConsoleService.ngInjectableDef = i0.defineInjectable({ factory: function ConsoleService_Factory() { return new ConsoleService(); }, token: ConsoleService, providedIn: "root" });
        return ConsoleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isDefined(value) {
        return value !== undefined && value !== null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObject(value) {
        return typeof value === 'object' && isDefined(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isPromise(value) {
        return value instanceof Promise;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return value instanceof Function;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03C9': '\u03C9',
        '\u03C2': '\u03C3'
    };
    /**
     * @param {?} text
     * @return {?}
     */
    function stripSpecialChars(text) {
        /** @type {?} */
        var match = function (a) {
            return diacritics[a] || a;
        };
        return text.replace(/[^\u0000-\u007E]/g, match);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function newId() {
        // First character is an 'a', it's good practice to tag id to begin with a letter
        return 'axxxxxxxxxxx'.replace(/[x]/g, function (_) {
            /** @type {?} */
            var val = Math.random() * 16 | 0;
            return val.toString(16);
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ItemsList = /** @class */ (function () {
        function ItemsList(_ngSelect, _selectionModel) {
            this._ngSelect = _ngSelect;
            this._selectionModel = _selectionModel;
            this._items = [];
            this._filteredItems = [];
            this._markedIndex = -1;
        }
        Object.defineProperty(ItemsList.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return this._items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "filteredItems", {
            get: /**
             * @return {?}
             */ function () {
                return this._filteredItems;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "markedIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._markedIndex;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "selectedItems", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectionModel.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "markedItem", {
            get: /**
             * @return {?}
             */ function () {
                return this._filteredItems[this._markedIndex];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "noItemsToSelect", {
            get: /**
             * @return {?}
             */ function () {
                return this._ngSelect.hideSelected && this._items.length === this.selectedItems.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "maxItemsSelected", {
            get: /**
             * @return {?}
             */ function () {
                return this._ngSelect.multiple && this._ngSelect.maxSelectedItems <= this.selectedItems.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemsList.prototype, "lastSelectedItem", {
            get: /**
             * @return {?}
             */ function () {
                return this.selectedItems[this.selectedItems.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} items
         * @return {?}
         */
        ItemsList.prototype.setItems = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var _this = this;
                this._items = items.map(function (item, index) { return _this.mapItem(item, index); });
                if (this._ngSelect.groupBy) {
                    this._groups = this._groupBy(this._items, this._ngSelect.groupBy);
                    this._items = this._flatten(this._groups);
                }
                else {
                    this._groups = new Map();
                    this._groups.set(undefined, this._items);
                }
                this._filteredItems = __spread(this._items);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ItemsList.prototype.select = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item.selected || this.maxItemsSelected) {
                    return;
                }
                /** @type {?} */
                var multiple = this._ngSelect.multiple;
                if (!multiple) {
                    this.clearSelected();
                }
                this._selectionModel.select(item, multiple, this._ngSelect.selectableGroupAsModel);
                if (this._ngSelect.hideSelected && multiple) {
                    this._hideSelected(item);
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ItemsList.prototype.unselect = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (!item.selected) {
                    return;
                }
                this._selectionModel.unselect(item, this._ngSelect.multiple);
                if (this._ngSelect.hideSelected && isDefined(item.index) && this._ngSelect.multiple) {
                    this._showSelected(item);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ItemsList.prototype.findItem = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                /** @type {?} */
                var findBy;
                if (this._ngSelect.compareWith) {
                    findBy = function (item) { return _this._ngSelect.compareWith(item.value, value); };
                }
                else if (this._ngSelect.bindValue) {
                    findBy = function (item) { return !item.children && _this.resolveNested(item.value, _this._ngSelect.bindValue) === value; };
                }
                else {
                    findBy = function (item) {
                        return item.value === value ||
                            !item.children && item.label && item.label === _this.resolveNested(value, _this._ngSelect.bindLabel);
                    };
                }
                return this._items.find(function (item) { return findBy(item); });
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ItemsList.prototype.addItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var option = this.mapItem(item, this._items.length);
                this._items.push(option);
                this._filteredItems.push(option);
                return option;
            };
        /**
         * @return {?}
         */
        ItemsList.prototype.clearSelected = /**
         * @return {?}
         */
            function () {
                this._selectionModel.clear();
                this._items.forEach(function (item) {
                    item.selected = false;
                    item.marked = false;
                });
                if (this._ngSelect.hideSelected) {
                    this.resetFilteredItems();
                }
            };
        /**
         * @param {?} term
         * @return {?}
         */
        ItemsList.prototype.findByLabel = /**
         * @param {?} term
         * @return {?}
         */
            function (term) {
                term = stripSpecialChars(term).toLocaleLowerCase();
                return this.filteredItems.find(function (item) {
                    /** @type {?} */
                    var label = stripSpecialChars(item.label).toLocaleLowerCase();
                    return label.substr(0, term.length) === term;
                });
            };
        /**
         * @param {?} term
         * @return {?}
         */
        ItemsList.prototype.filter = /**
         * @param {?} term
         * @return {?}
         */
            function (term) {
                var e_1, _a;
                if (!term) {
                    this.resetFilteredItems();
                    return;
                }
                this._filteredItems = [];
                term = this._ngSelect.searchFn ? term : stripSpecialChars(term).toLocaleLowerCase();
                /** @type {?} */
                var match = this._ngSelect.searchFn || this._defaultSearchFn;
                /** @type {?} */
                var hideSelected = this._ngSelect.hideSelected;
                var _loop_1 = function (key) {
                    var e_2, _a, _b;
                    /** @type {?} */
                    var matchedItems = [];
                    try {
                        for (var _c = __values(this_1._groups.get(key)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var item = _d.value;
                            if (hideSelected && (item.parent && item.parent.selected || item.selected)) {
                                continue;
                            }
                            /** @type {?} */
                            var searchItem = this_1._ngSelect.searchFn ? item.value : item;
                            if (match(term, searchItem)) {
                                matchedItems.push(item);
                            }
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return))
                                _a.call(_c);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                    if (matchedItems.length > 0) {
                        var _e = __read(matchedItems.slice(-1), 1), last_1 = _e[0];
                        if (last_1.parent) {
                            /** @type {?} */
                            var head = this_1._items.find(function (x) { return x === last_1.parent; });
                            this_1._filteredItems.push(head);
                        }
                        (_b = this_1._filteredItems).push.apply(_b, __spread(matchedItems));
                    }
                };
                var this_1 = this;
                try {
                    for (var _b = __values(Array.from(this._groups.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        _loop_1(key);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @return {?}
         */
        ItemsList.prototype.resetFilteredItems = /**
         * @return {?}
         */
            function () {
                if (this._filteredItems.length === this._items.length) {
                    return;
                }
                if (this._ngSelect.hideSelected && this.selectedItems.length > 0) {
                    this._filteredItems = this._items.filter(function (x) { return !x.selected; });
                }
                else {
                    this._filteredItems = this._items;
                }
            };
        /**
         * @return {?}
         */
        ItemsList.prototype.unmarkItem = /**
         * @return {?}
         */
            function () {
                this._markedIndex = -1;
            };
        /**
         * @return {?}
         */
        ItemsList.prototype.markNextItem = /**
         * @return {?}
         */
            function () {
                this._stepToItem(+1);
            };
        /**
         * @return {?}
         */
        ItemsList.prototype.markPreviousItem = /**
         * @return {?}
         */
            function () {
                this._stepToItem(-1);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ItemsList.prototype.markItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this._markedIndex = this._filteredItems.indexOf(item);
            };
        /**
         * @param {?=} markDefault
         * @return {?}
         */
        ItemsList.prototype.markSelectedOrDefault = /**
         * @param {?=} markDefault
         * @return {?}
         */
            function (markDefault) {
                if (this._filteredItems.length === 0) {
                    return;
                }
                /** @type {?} */
                var indexOfLastSelected = this._ngSelect.hideSelected ? -1 : this._filteredItems.indexOf(this.lastSelectedItem);
                if (this.lastSelectedItem && indexOfLastSelected > -1) {
                    this._markedIndex = indexOfLastSelected;
                }
                else {
                    this._markedIndex = markDefault ? this.filteredItems.findIndex(function (x) { return !x.disabled; }) : -1;
                }
            };
        /**
         * @param {?} option
         * @param {?} key
         * @return {?}
         */
        ItemsList.prototype.resolveNested = /**
         * @param {?} option
         * @param {?} key
         * @return {?}
         */
            function (option, key) {
                if (!isObject(option)) {
                    return option;
                }
                if (key.indexOf('.') === -1) {
                    return option[key];
                }
                else {
                    /** @type {?} */
                    var keys = key.split('.');
                    /** @type {?} */
                    var value = option;
                    for (var i = 0, len = keys.length; i < len; ++i) {
                        if (value == null) {
                            return null;
                        }
                        value = value[keys[i]];
                    }
                    return value;
                }
            };
        /**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        ItemsList.prototype.mapItem = /**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
            function (item, index) {
                /** @type {?} */
                var label = isDefined(item.$ngOptionLabel) ? item.$ngOptionLabel : this.resolveNested(item, this._ngSelect.bindLabel);
                /** @type {?} */
                var value = isDefined(item.$ngOptionValue) ? item.$ngOptionValue : item;
                return {
                    index: index,
                    label: isDefined(label) ? label.toString() : '',
                    value: value,
                    disabled: item.disabled,
                    htmlId: newId()
                };
            };
        /**
         * @return {?}
         */
        ItemsList.prototype.mapSelectedItems = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var e_3, _a;
                /** @type {?} */
                var multiple = this._ngSelect.multiple;
                try {
                    for (var _b = __values(this.selectedItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var selected = _c.value;
                        /** @type {?} */
                        var value = this._ngSelect.bindValue ? this.resolveNested(selected.value, this._ngSelect.bindValue) : selected.value;
                        /** @type {?} */
                        var item = isDefined(value) ? this.findItem(value) : null;
                        this._selectionModel.unselect(selected, multiple);
                        this._selectionModel.select(item || selected, multiple, this._ngSelect.selectableGroupAsModel);
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                if (this._ngSelect.hideSelected) {
                    this._filteredItems = this.filteredItems.filter(function (x) { return _this.selectedItems.indexOf(x) === -1; });
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ItemsList.prototype._showSelected = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var e_4, _a;
                this._filteredItems.push(item);
                if (item.parent) {
                    /** @type {?} */
                    var parent_1 = item.parent;
                    /** @type {?} */
                    var parentExists = this._filteredItems.find(function (x) { return x === parent_1; });
                    if (!parentExists) {
                        this._filteredItems.push(parent_1);
                    }
                }
                else if (item.children) {
                    try {
                        for (var _b = __values(item.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var child = _c.value;
                            child.selected = false;
                            this._filteredItems.push(child);
                        }
                    }
                    catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_4)
                                throw e_4.error;
                        }
                    }
                }
                this._filteredItems = __spread(this._filteredItems.sort(function (a, b) { return (a.index - b.index); }));
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ItemsList.prototype._hideSelected = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this._filteredItems = this._filteredItems.filter(function (x) { return x !== item; });
                if (item.parent) {
                    /** @type {?} */
                    var children = item.parent.children;
                    if (children.every(function (x) { return x.selected; })) {
                        this._filteredItems = this._filteredItems.filter(function (x) { return x !== item.parent; });
                    }
                }
                else if (item.children) {
                    this._filteredItems = this.filteredItems.filter(function (x) { return x.parent !== item; });
                }
            };
        /**
         * @param {?} search
         * @param {?} opt
         * @return {?}
         */
        ItemsList.prototype._defaultSearchFn = /**
         * @param {?} search
         * @param {?} opt
         * @return {?}
         */
            function (search, opt) {
                /** @type {?} */
                var label = stripSpecialChars(opt.label).toLocaleLowerCase();
                return label.indexOf(search) > -1;
            };
        /**
         * @param {?} steps
         * @return {?}
         */
        ItemsList.prototype._getNextItemIndex = /**
         * @param {?} steps
         * @return {?}
         */
            function (steps) {
                if (steps > 0) {
                    return (this._markedIndex === this._filteredItems.length - 1) ? 0 : (this._markedIndex + 1);
                }
                return (this._markedIndex <= 0) ? (this._filteredItems.length - 1) : (this._markedIndex - 1);
            };
        /**
         * @param {?} steps
         * @return {?}
         */
        ItemsList.prototype._stepToItem = /**
         * @param {?} steps
         * @return {?}
         */
            function (steps) {
                if (this._filteredItems.length === 0 || this._filteredItems.every(function (x) { return x.disabled; })) {
                    return;
                }
                this._markedIndex = this._getNextItemIndex(steps);
                if (this.markedItem.disabled) {
                    this._stepToItem(steps);
                }
            };
        /**
         * @param {?} items
         * @param {?} prop
         * @return {?}
         */
        ItemsList.prototype._groupBy = /**
         * @param {?} items
         * @param {?} prop
         * @return {?}
         */
            function (items, prop) {
                var e_5, _a;
                /** @type {?} */
                var isFn = isFunction(this._ngSelect.groupBy);
                /** @type {?} */
                var groups = new Map();
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        /** @type {?} */
                        var key = isFn ? ( /** @type {?} */(prop))(item.value) : item.value[ /** @type {?} */(prop)];
                        key = isDefined(key) ? key : undefined;
                        /** @type {?} */
                        var group = groups.get(key);
                        if (group) {
                            group.push(item);
                        }
                        else {
                            groups.set(key, [item]);
                        }
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                            _a.call(items_1);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
                return groups;
            };
        /**
         * @param {?} groups
         * @return {?}
         */
        ItemsList.prototype._flatten = /**
         * @param {?} groups
         * @return {?}
         */
            function (groups) {
                var e_6, _a;
                /** @type {?} */
                var isFn = isFunction(this._ngSelect.groupBy);
                /** @type {?} */
                var items = [];
                /** @type {?} */
                var withoutGroup = groups.get(undefined) || [];
                items.push.apply(items, __spread(withoutGroup));
                /** @type {?} */
                var i = withoutGroup.length;
                var _loop_2 = function (key) {
                    if (!isDefined(key)) {
                        return "continue";
                    }
                    /** @type {?} */
                    var parent_2 = {
                        label: key,
                        children: undefined,
                        parent: null,
                        index: i++,
                        disabled: !this_2._ngSelect.selectableGroup,
                        htmlId: newId()
                    };
                    /** @type {?} */
                    var groupKey = isFn ? this_2._ngSelect.bindLabel : /** @type {?} */ (this_2._ngSelect.groupBy);
                    /** @type {?} */
                    var groupValue = this_2._ngSelect.groupValue || (function () {
                        var _a;
                        return (_a = {}, _a[groupKey] = key, _a);
                    });
                    /** @type {?} */
                    var children = groups.get(key).map(function (x) {
                        x.parent = parent_2;
                        x.children = undefined;
                        x.index = i++;
                        return x;
                    });
                    parent_2.children = children;
                    parent_2.value = groupValue(key, children.map(function (x) { return x.value; }));
                    items.push(parent_2);
                    items.push.apply(items, __spread(children));
                };
                var this_2 = this;
                try {
                    for (var _b = __values(Array.from(groups.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        _loop_2(key);
                    }
                }
                catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_6)
                            throw e_6.error;
                    }
                }
                return items;
            };
        return ItemsList;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var KeyCode = {
        Tab: 9,
        Enter: 13,
        Esc: 27,
        Space: 32,
        ArrowUp: 38,
        ArrowDown: 40,
        Backspace: 8,
    };
    KeyCode[KeyCode.Tab] = 'Tab';
    KeyCode[KeyCode.Enter] = 'Enter';
    KeyCode[KeyCode.Esc] = 'Esc';
    KeyCode[KeyCode.Space] = 'Space';
    KeyCode[KeyCode.ArrowUp] = 'ArrowUp';
    KeyCode[KeyCode.ArrowDown] = 'ArrowDown';
    KeyCode[KeyCode.Backspace] = 'Backspace';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var WindowService = /** @class */ (function () {
        function WindowService() {
        }
        /**
         * @param {?} fn
         * @return {?}
         */
        WindowService.prototype.requestAnimationFrame = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                return window.requestAnimationFrame(fn);
            };
        /**
         * @param {?} handler
         * @param {?} timeout
         * @return {?}
         */
        WindowService.prototype.setTimeout = /**
         * @param {?} handler
         * @param {?} timeout
         * @return {?}
         */
            function (handler, timeout) {
                return window.setTimeout(handler, timeout);
            };
        WindowService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ WindowService.ngInjectableDef = i0.defineInjectable({ factory: function WindowService_Factory() { return new WindowService(); }, token: WindowService, providedIn: "root" });
        return WindowService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var VirtualScrollService = /** @class */ (function () {
        function VirtualScrollService() {
        }
        /**
         * @param {?} d
         * @param {?} dropdownEl
         * @param {?} bufferAmount
         * @return {?}
         */
        VirtualScrollService.prototype.calculateItems = /**
         * @param {?} d
         * @param {?} dropdownEl
         * @param {?} bufferAmount
         * @return {?}
         */
            function (d, dropdownEl, bufferAmount) {
                /** @type {?} */
                var scrollHeight = d.childHeight * d.itemsLength;
                if (dropdownEl.scrollTop > scrollHeight) {
                    dropdownEl.scrollTop = scrollHeight;
                }
                /** @type {?} */
                var scrollTop = Math.max(0, dropdownEl.scrollTop);
                /** @type {?} */
                var indexByScrollTop = scrollTop / scrollHeight * d.itemsLength;
                /** @type {?} */
                var end = Math.min(d.itemsLength, Math.ceil(indexByScrollTop) + (d.itemsPerCol + 1));
                /** @type {?} */
                var maxStartEnd = end;
                /** @type {?} */
                var maxStart = Math.max(0, maxStartEnd - d.itemsPerCol - 1);
                /** @type {?} */
                var start = Math.min(maxStart, Math.floor(indexByScrollTop));
                /** @type {?} */
                var topPadding = d.childHeight * Math.ceil(start) - (d.childHeight * Math.min(start, bufferAmount));
                topPadding = !isNaN(topPadding) ? topPadding : 0;
                start = !isNaN(start) ? start : -1;
                end = !isNaN(end) ? end : -1;
                start -= bufferAmount;
                start = Math.max(0, start);
                end += bufferAmount;
                end = Math.min(d.itemsLength, end);
                return {
                    topPadding: topPadding,
                    scrollHeight: scrollHeight,
                    start: start,
                    end: end
                };
            };
        /**
         * @param {?} itemsLength
         * @param {?} index
         * @param {?} panelEl
         * @param {?} contentEl
         * @return {?}
         */
        VirtualScrollService.prototype.calculateDimensions = /**
         * @param {?} itemsLength
         * @param {?} index
         * @param {?} panelEl
         * @param {?} contentEl
         * @return {?}
         */
            function (itemsLength, index, panelEl, contentEl) {
                /** @type {?} */
                var panelRect = panelEl.getBoundingClientRect();
                /** @type {?} */
                var itemRect = contentEl.children[index] ? contentEl.children[index].getBoundingClientRect() : {
                    width: panelRect.width,
                    height: panelRect.height,
                    top: 0,
                };
                /** @type {?} */
                var itemsPerCol = Math.max(1, Math.floor(panelRect.height / itemRect.height));
                return {
                    itemsLength: itemsLength,
                    viewWidth: panelRect.width,
                    viewHeight: panelRect.height,
                    childWidth: itemRect.width,
                    childHeight: itemRect.height,
                    itemsPerCol: itemsPerCol,
                };
            };
        VirtualScrollService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ VirtualScrollService.ngInjectableDef = i0.defineInjectable({ factory: function VirtualScrollService_Factory() { return new VirtualScrollService(); }, token: VirtualScrollService, providedIn: "root" });
        return VirtualScrollService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TOP_CSS_CLASS = 'ng-select-top';
    /** @type {?} */
    var BOTTOM_CSS_CLASS = 'ng-select-bottom';
    var NgDropdownPanelComponent = /** @class */ (function () {
        function NgDropdownPanelComponent(_renderer, _zone, _virtualScrollService, _window, _elementRef, _document) {
            this._renderer = _renderer;
            this._zone = _zone;
            this._virtualScrollService = _virtualScrollService;
            this._window = _window;
            this._document = _document;
            this.items = [];
            this.position = 'auto';
            this.bufferAmount = 4;
            this.virtualScroll = false;
            this.filterValue = null;
            this.update = new i0.EventEmitter();
            this.scroll = new i0.EventEmitter();
            this.scrollToEnd = new i0.EventEmitter();
            this.outsideClick = new i0.EventEmitter();
            this._destroy$ = new rxjs.Subject();
            this._startupLoop = true;
            this._isScrolledToMarked = false;
            this._scrollToEndFired = false;
            this._disposeScrollListener = function () { };
            this._disposeDocumentResizeListener = function () { };
            this._dropdown = _elementRef.nativeElement;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.handleMousedown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var target = /** @type {?} */ ($event.target);
                if (target.tagName === 'INPUT') {
                    return;
                }
                $event.preventDefault();
                $event.stopPropagation();
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._select = this._dropdown.parentElement;
                this._handleScroll();
                if (this._document) {
                    rxjs.merge(rxjs.fromEvent(this._document, 'touchstart', { capture: true }), rxjs.fromEvent(this._document, 'mousedown', { capture: true }))
                        .pipe(operators.takeUntil(this._destroy$))
                        .subscribe(function ($event) { return _this._handleOutsideClick($event); });
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["items"]) {
                    this._isScrolledToMarked = false;
                    this._handleItemsChange(changes["items"]);
                }
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._disposeDocumentResizeListener();
                this._disposeScrollListener();
                this._destroy$.next();
                this._destroy$.complete();
                if (this.appendTo) {
                    this._renderer.removeChild(this._dropdown.parentNode, this._dropdown);
                }
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._whenContentReady().then(function () {
                    if (_this.appendTo) {
                        _this._appendDropdown();
                        _this._handleDocumentResize();
                    }
                    _this.updateDropdownPosition();
                });
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.refresh = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve) {
                    _this._zone.runOutsideAngular(function () {
                        _this._window.requestAnimationFrame(function () {
                            _this._updateItems().then(resolve);
                        });
                    });
                });
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.scrollInto = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (!item) {
                    return;
                }
                /** @type {?} */
                var index = this.items.indexOf(item);
                if (index < 0 || index >= this.items.length) {
                    return;
                }
                /** @type {?} */
                var d = this._calculateDimensions(this.virtualScroll ? 0 : index);
                /** @type {?} */
                var scrollEl = this.scrollElementRef.nativeElement;
                /** @type {?} */
                var buffer = Math.floor(d.viewHeight / d.childHeight) - 1;
                if (this.virtualScroll) {
                    scrollEl.scrollTop = (index * d.childHeight) - (d.childHeight * Math.min(index, buffer));
                }
                else {
                    /** @type {?} */
                    var contentEl = this.contentElementRef.nativeElement;
                    /** @type {?} */
                    var childrenHeight = Array.from(contentEl.children).slice(0, index).reduce(function (c, n) { return c + n.clientHeight; }, 0);
                    scrollEl.scrollTop = childrenHeight - (d.childHeight * Math.min(index, buffer));
                }
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.scrollIntoTag = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.scrollElementRef.nativeElement;
                /** @type {?} */
                var d = this._calculateDimensions();
                el.scrollTop = d.childHeight * (d.itemsLength + 1);
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype.updateDropdownPosition = /**
         * @return {?}
         */
            function () {
                this._currentPosition = this._calculateCurrentPosition(this._dropdown);
                if (this._currentPosition === 'top') {
                    this._renderer.addClass(this._dropdown, TOP_CSS_CLASS);
                    this._renderer.removeClass(this._dropdown, BOTTOM_CSS_CLASS);
                    this._renderer.addClass(this._select, TOP_CSS_CLASS);
                    this._renderer.removeClass(this._select, BOTTOM_CSS_CLASS);
                }
                else {
                    this._renderer.addClass(this._dropdown, BOTTOM_CSS_CLASS);
                    this._renderer.removeClass(this._dropdown, TOP_CSS_CLASS);
                    this._renderer.addClass(this._select, BOTTOM_CSS_CLASS);
                    this._renderer.removeClass(this._select, TOP_CSS_CLASS);
                }
                if (this.appendTo) {
                    this._updateAppendedDropdownPosition();
                }
                this._dropdown.style.opacity = '1';
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._handleOutsideClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this._select.contains($event.target)) {
                    return;
                }
                if (this._dropdown.contains($event.target)) {
                    return;
                }
                /** @type {?} */
                var path = $event.path || ($event.composedPath && $event.composedPath());
                if ($event.target && $event.target.shadowRoot && path && path[0] && this._select.contains(path[0])) {
                    return;
                }
                this.outsideClick.emit();
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._handleScroll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._disposeScrollListener = this._renderer.listen(this.scrollElementRef.nativeElement, 'scroll', function () {
                    _this.refresh();
                    _this._fireScrollToEnd();
                });
            };
        /**
         * @param {?} items
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._handleItemsChange = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var _this = this;
                this._scrollToEndFired = false;
                this._previousStart = undefined;
                this._previousEnd = undefined;
                if (items !== undefined && items.previousValue === undefined ||
                    (items.previousValue !== undefined && items.previousValue.length === 0)) {
                    this._startupLoop = true;
                }
                this.items = items.currentValue || [];
                this.refresh().then(function () {
                    if (_this.appendTo && _this._currentPosition === 'top') {
                        _this._updateAppendedDropdownPosition();
                    }
                });
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._updateItems = /**
         * @return {?}
         */
            function () {
                var _this = this;
                i0.NgZone.assertNotInAngularZone();
                if (!this.virtualScroll) {
                    this._zone.run(function () {
                        _this.update.emit(_this.items.slice());
                        _this._scrollToMarked();
                    });
                    return Promise.resolve();
                }
                /** @type {?} */
                var loop = function (resolve) {
                    /** @type {?} */
                    var d = _this._calculateDimensions();
                    /** @type {?} */
                    var res = _this._virtualScrollService.calculateItems(d, _this.scrollElementRef.nativeElement, _this.bufferAmount || 0);
                    ( /** @type {?} */(_this.paddingElementRef.nativeElement)).style.height = res.scrollHeight + "px";
                    ( /** @type {?} */(_this.contentElementRef.nativeElement)).style.transform = 'translateY(' + res.topPadding + 'px)';
                    if (res.start !== _this._previousStart || res.end !== _this._previousEnd) {
                        _this._zone.run(function () {
                            _this.update.emit(_this.items.slice(res.start, res.end));
                            _this.scroll.emit({ start: res.start, end: res.end });
                        });
                        _this._previousStart = res.start;
                        _this._previousEnd = res.end;
                        if (_this._startupLoop === true) {
                            loop(resolve);
                        }
                    }
                    else if (_this._startupLoop === true) {
                        _this._startupLoop = false;
                        _this._scrollToMarked();
                        resolve();
                    }
                };
                return new Promise(function (resolve) { return loop(resolve); });
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._fireScrollToEnd = /**
         * @return {?}
         */
            function () {
                if (this._scrollToEndFired) {
                    return;
                }
                /** @type {?} */
                var scroll = this.scrollElementRef.nativeElement;
                /** @type {?} */
                var padding = this.virtualScroll ?
                    this.paddingElementRef.nativeElement :
                    this.contentElementRef.nativeElement;
                if (scroll.scrollTop + this._dropdown.clientHeight >= padding.clientHeight) {
                    this.scrollToEnd.emit();
                    this._scrollToEndFired = true;
                }
            };
        /**
         * @param {?=} index
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._calculateDimensions = /**
         * @param {?=} index
         * @return {?}
         */
            function (index) {
                if (index === void 0) {
                    index = 0;
                }
                return this._virtualScrollService.calculateDimensions(this.items.length, index, this.scrollElementRef.nativeElement, this.contentElementRef.nativeElement);
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._handleDocumentResize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.appendTo) {
                    return;
                }
                this._disposeDocumentResizeListener = this._renderer.listen('window', 'resize', function () {
                    _this._updateAppendedDropdownPosition();
                });
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._scrollToMarked = /**
         * @return {?}
         */
            function () {
                if (this._isScrolledToMarked || !this.markedItem) {
                    return;
                }
                this._isScrolledToMarked = true;
                this.scrollInto(this.markedItem);
            };
        /**
         * @param {?} dropdownEl
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._calculateCurrentPosition = /**
         * @param {?} dropdownEl
         * @return {?}
         */
            function (dropdownEl) {
                if (this.position !== 'auto') {
                    return this.position;
                }
                /** @type {?} */
                var selectRect = this._select.getBoundingClientRect();
                /** @type {?} */
                var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
                /** @type {?} */
                var offsetTop = selectRect.top + window.pageYOffset;
                /** @type {?} */
                var height = selectRect.height;
                /** @type {?} */
                var dropdownHeight = dropdownEl.getBoundingClientRect().height;
                if (offsetTop + height + dropdownHeight > scrollTop + document.documentElement.clientHeight) {
                    return 'top';
                }
                else {
                    return 'bottom';
                }
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._appendDropdown = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var parent = document.querySelector(this.appendTo);
                if (!parent) {
                    throw new Error("appendTo selector " + this.appendTo + " did not found any parent element");
                }
                parent.appendChild(this._dropdown);
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._updateAppendedDropdownPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var parent = document.querySelector(this.appendTo) || document.body;
                this._dropdown.style.display = 'none';
                /** @type {?} */
                var selectRect = this._select.getBoundingClientRect();
                /** @type {?} */
                var boundingRect = parent.getBoundingClientRect();
                this._dropdown.style.display = '';
                /** @type {?} */
                var offsetTop = selectRect.top - boundingRect.top;
                /** @type {?} */
                var offsetLeft = selectRect.left - boundingRect.left;
                /** @type {?} */
                var topDelta = this._currentPosition === 'bottom' ? selectRect.height : -this._dropdown.clientHeight;
                this._dropdown.style.top = offsetTop + topDelta + 'px';
                this._dropdown.style.bottom = 'auto';
                this._dropdown.style.left = offsetLeft + 'px';
                this._dropdown.style.width = selectRect.width + 'px';
                this._dropdown.style.minWidth = selectRect.width + 'px';
            };
        /**
         * @return {?}
         */
        NgDropdownPanelComponent.prototype._whenContentReady = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.items.length === 0) {
                    return Promise.resolve();
                }
                /** @type {?} */
                var ready = function (resolve) {
                    /** @type {?} */
                    var ngOption = _this._dropdown.querySelector('.ng-option');
                    if (ngOption) {
                        resolve();
                        return;
                    }
                    _this._zone.runOutsideAngular(function () {
                        setTimeout(function () { return ready(resolve); }, 5);
                    });
                };
                return new Promise(function (resolve) { return ready(resolve); });
            };
        NgDropdownPanelComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        selector: 'ng-dropdown-panel',
                        template: "\n        <div *ngIf=\"headerTemplate\" class=\"ng-dropdown-header\">\n            <ng-container [ngTemplateOutlet]=\"headerTemplate\" [ngTemplateOutletContext]=\"{ searchTerm: filterValue }\"></ng-container>\n        </div>\n        <div #scroll class=\"ng-dropdown-panel-items scroll-host\">\n            <div #padding [class.total-padding]=\"virtualScroll\"></div>\n            <div #content [class.scrollable-content]=\"virtualScroll && items.length > 0\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n        <div *ngIf=\"footerTemplate\" class=\"ng-dropdown-footer\">\n            <ng-container [ngTemplateOutlet]=\"footerTemplate\" [ngTemplateOutletContext]=\"{ searchTerm: filterValue }\"></ng-container>\n        </div>\n    "
                    }] }
        ];
        /** @nocollapse */
        NgDropdownPanelComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.NgZone },
                { type: VirtualScrollService },
                { type: WindowService },
                { type: i0.ElementRef },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        NgDropdownPanelComponent.propDecorators = {
            items: [{ type: i0.Input }],
            markedItem: [{ type: i0.Input }],
            position: [{ type: i0.Input }],
            appendTo: [{ type: i0.Input }],
            bufferAmount: [{ type: i0.Input }],
            virtualScroll: [{ type: i0.Input }],
            headerTemplate: [{ type: i0.Input }],
            footerTemplate: [{ type: i0.Input }],
            filterValue: [{ type: i0.Input }],
            update: [{ type: i0.Output }],
            scroll: [{ type: i0.Output }],
            scrollToEnd: [{ type: i0.Output }],
            outsideClick: [{ type: i0.Output }],
            contentElementRef: [{ type: i0.ViewChild, args: ['content', { read: i0.ElementRef },] }],
            scrollElementRef: [{ type: i0.ViewChild, args: ['scroll', { read: i0.ElementRef },] }],
            paddingElementRef: [{ type: i0.ViewChild, args: ['padding', { read: i0.ElementRef },] }],
            handleMousedown: [{ type: i0.HostListener, args: ['mousedown', ['$event'],] }]
        };
        return NgDropdownPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgOptionComponent = /** @class */ (function () {
        function NgOptionComponent(elementRef) {
            this.elementRef = elementRef;
            this.stateChange$ = new rxjs.Subject();
            this._disabled = false;
        }
        Object.defineProperty(NgOptionComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () { return this._disabled; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._disabled = this._isDisabled(value); },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NgOptionComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["disabled"]) {
                    this.stateChange$.next({
                        value: this.value,
                        disabled: this._disabled
                    });
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgOptionComponent.prototype._isDisabled = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value != null && "" + value !== 'false';
            };
        NgOptionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ng-option',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        NgOptionComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NgOptionComponent.propDecorators = {
            value: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }]
        };
        return NgOptionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgSelectConfig = /** @class */ (function () {
        function NgSelectConfig() {
            this.notFoundText = 'No items found';
            this.typeToSearchText = 'Type to search';
            this.addTagText = 'Add item';
            this.loadingText = 'Loading...';
            this.clearAllText = 'Clear all';
            this.disableVirtualScroll = true;
            this.openOnEnter = true;
        }
        NgSelectConfig.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ NgSelectConfig.ngInjectableDef = i0.defineInjectable({ factory: function NgSelectConfig_Factory() { return new NgSelectConfig(); }, token: NgSelectConfig, providedIn: "root" });
        return NgSelectConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SELECTION_MODEL_FACTORY = new i0.InjectionToken('ng-select-selection-model');
    var NgSelectComponent = /** @class */ (function () {
        function NgSelectComponent(classes, tabIndex, autoFocus, config, newSelectionModel, _elementRef, _cd, _console) {
            var _this = this;
            this.classes = classes;
            this.tabIndex = tabIndex;
            this.autoFocus = autoFocus;
            this._cd = _cd;
            this._console = _console;
            // inputs
            this.items = [];
            this.clearable = true;
            this.markFirst = true;
            this.dropdownPosition = 'auto';
            this.loading = false;
            this.closeOnSelect = true;
            this.hideSelected = false;
            this.selectOnTab = false;
            this.bufferAmount = 4;
            this.selectableGroup = false;
            this.selectableGroupAsModel = true;
            this.searchFn = null;
            this.clearOnBackspace = true;
            this.labelForId = null;
            this.multiple = false;
            this.addTag = false;
            this.searchable = true;
            this.isOpen = false;
            // output events
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
            this.changeEvent = new i0.EventEmitter();
            this.openEvent = new i0.EventEmitter();
            this.closeEvent = new i0.EventEmitter();
            this.searchEvent = new i0.EventEmitter();
            this.clearEvent = new i0.EventEmitter();
            this.addEvent = new i0.EventEmitter();
            this.removeEvent = new i0.EventEmitter();
            this.scroll = new i0.EventEmitter();
            this.scrollToEnd = new i0.EventEmitter();
            this.disabled = false;
            this.viewPortItems = [];
            this.filterValue = null;
            this.dropdownId = newId();
            this.selectedItemId = 0;
            this._defaultLabel = 'label';
            this._primitive = true;
            this._pressedKeys = [];
            this._destroy$ = new rxjs.Subject();
            this._keyPress$ = new rxjs.Subject();
            this._onChange = function (_) { };
            this._onTouched = function () { };
            this.clearItem = function (item) {
                /** @type {?} */
                var option = _this.selectedItems.find(function (x) { return x.value === item; });
                _this.unselect(option);
            };
            this._mergeGlobalConfig(config);
            this.itemsList = new ItemsList(this, newSelectionModel());
            this.element = _elementRef.nativeElement;
        }
        Object.defineProperty(NgSelectComponent.prototype, "compareWith", {
            get: /**
             * @return {?}
             */ function () { return this._compareWith; },
            set: /**
             * @param {?} fn
             * @return {?}
             */ function (fn) {
                if (!isFunction(fn)) {
                    throw Error('`compareWith` must be a function.');
                }
                this._compareWith = fn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectComponent.prototype, "clearSearchOnAdd", {
            get: /**
             * @return {?}
             */ function () { return isDefined(this._clearSearchOnAdd) ? this._clearSearchOnAdd : this.closeOnSelect; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._clearSearchOnAdd = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectComponent.prototype, "filtered", {
            get: /**
             * @return {?}
             */ function () { return !!this.filterValue && this.searchable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectComponent.prototype, "selectedItems", {
            get: /**
             * @return {?}
             */ function () {
                return this.itemsList.selectedItems;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectComponent.prototype, "selectedValues", {
            get: /**
             * @return {?}
             */ function () {
                return this.selectedItems.map(function (x) { return x.value; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectComponent.prototype, "hasValue", {
            get: /**
             * @return {?}
             */ function () {
                return this.selectedItems.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._handleKeyPresses();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgSelectComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["multiple"]) {
                    this.itemsList.clearSelected();
                }
                if (changes["items"]) {
                    this._setItems(changes["items"].currentValue || []);
                }
                if (changes["isOpen"]) {
                    this._manualOpen = isDefined(changes["isOpen"].currentValue);
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.items && this.items.length === 0) {
                    this._setItemsFromNgOptions();
                }
                if (isDefined(this.autoFocus)) {
                    this.focus();
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._destroy$.next();
                this._destroy$.complete();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype.handleKeyDown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (KeyCode[$event.which]) {
                    switch ($event.which) {
                        case KeyCode.ArrowDown:
                            this._handleArrowDown($event);
                            break;
                        case KeyCode.ArrowUp:
                            this._handleArrowUp($event);
                            break;
                        case KeyCode.Space:
                            this._handleSpace($event);
                            break;
                        case KeyCode.Enter:
                            this._handleEnter($event);
                            break;
                        case KeyCode.Tab:
                            this._handleTab($event);
                            break;
                        case KeyCode.Esc:
                            this.close();
                            $event.preventDefault();
                            $event.stopPropagation();
                            break;
                        case KeyCode.Backspace:
                            this._handleBackspace();
                            break;
                    }
                }
                else if ($event.key && $event.key.length === 1) {
                    this._keyPress$.next($event.key.toLocaleLowerCase());
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype.handleMousedown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var target = /** @type {?} */ ($event.target);
                if (target.tagName !== 'INPUT') {
                    $event.preventDefault();
                }
                $event.stopPropagation();
                if (target.classList.contains('ng-clear-wrapper')) {
                    this.handleClearClick();
                    return;
                }
                if (target.classList.contains('ng-arrow-wrapper')) {
                    this.handleArrowClick();
                    return;
                }
                if (target.classList.contains('ng-value-icon')) {
                    return;
                }
                if (!this.focused) {
                    this.focus();
                }
                if (this.searchable) {
                    this.open();
                }
                else {
                    this.toggle();
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.handleArrowClick = /**
         * @return {?}
         */
            function () {
                if (this.isOpen) {
                    this.close();
                }
                else {
                    this.open();
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.handleClearClick = /**
         * @return {?}
         */
            function () {
                if (this.hasValue) {
                    this.clearModel();
                }
                this._clearSearch();
                this.focus();
                if (this._isTypeahead) {
                    this.typeahead.next(null);
                }
                this.clearEvent.emit();
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.clearModel = /**
         * @return {?}
         */
            function () {
                if (!this.clearable) {
                    return;
                }
                this.itemsList.clearSelected();
                this._updateNgModel();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgSelectComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.itemsList.clearSelected();
                this._handleWriteValue(value);
                this._cd.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgSelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgSelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NgSelectComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
                this._cd.markForCheck();
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.toggle = /**
         * @return {?}
         */
            function () {
                if (!this.isOpen) {
                    this.open();
                }
                else {
                    this.close();
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                if (this.disabled || this.isOpen || this.itemsList.maxItemsSelected || this._manualOpen) {
                    return;
                }
                if (!this._isTypeahead && !this.addTag && this.itemsList.noItemsToSelect) {
                    return;
                }
                this.isOpen = true;
                this.itemsList.markSelectedOrDefault(this.markFirst);
                this.openEvent.emit();
                if (!this.filterValue) {
                    this.focus();
                }
                this.detectChanges();
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                if (!this.isOpen || this._manualOpen) {
                    return;
                }
                this.isOpen = false;
                this._clearSearch();
                this._onTouched();
                this.closeEvent.emit();
                this._cd.markForCheck();
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NgSelectComponent.prototype.toggleItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (!item || item.disabled || this.disabled) {
                    return;
                }
                if (this.multiple && item.selected) {
                    this.unselect(item);
                }
                else {
                    this.select(item);
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NgSelectComponent.prototype.select = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (!item.selected) {
                    this.itemsList.select(item);
                    if (this.clearSearchOnAdd) {
                        this._clearSearch();
                    }
                    if (this.multiple) {
                        this.addEvent.emit(item.value);
                    }
                    this._updateNgModel();
                }
                if (this.closeOnSelect || this.itemsList.noItemsToSelect) {
                    this.close();
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.filterInput.nativeElement.focus();
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NgSelectComponent.prototype.unselect = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.itemsList.unselect(item);
                this.focus();
                this._updateNgModel();
                this.removeEvent.emit(item);
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.selectTag = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var _a;
                /** @type {?} */
                var tag;
                if (isFunction(this.addTag)) {
                    tag = ( /** @type {?} */(this.addTag))(this.filterValue);
                }
                else {
                    tag = this._primitive ? this.filterValue : (_a = {}, _a[this.bindLabel] = this.filterValue, _a);
                }
                /** @type {?} */
                var handleTag = function (item) { return _this._isTypeahead || !_this.isOpen ? _this.itemsList.mapItem(item, null) : _this.itemsList.addItem(item); };
                if (isPromise(tag)) {
                    tag.then(function (item) { return _this.select(handleTag(item)); }).catch(function () { });
                }
                else if (tag) {
                    this.select(handleTag(tag));
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.showClear = /**
         * @return {?}
         */
            function () {
                return this.clearable && (this.hasValue || this.filterValue) && !this.disabled;
            };
        Object.defineProperty(NgSelectComponent.prototype, "showAddTag", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.filterValue) {
                    return false;
                }
                /** @type {?} */
                var term = this.filterValue.toLowerCase();
                return this.addTag &&
                    (!this.itemsList.filteredItems.some(function (x) { return x.label.toLowerCase() === term; }) &&
                        (!this.hideSelected && this.isOpen || !this.selectedItems.some(function (x) { return x.label.toLowerCase() === term; }))) &&
                    !this.loading;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.showNoItemsFound = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var empty = this.itemsList.filteredItems.length === 0;
                return ((empty && !this._isTypeahead && !this.loading) ||
                    (empty && this._isTypeahead && this.filterValue && !this.loading)) &&
                    !this.showAddTag;
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.showTypeToSearch = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var empty = this.itemsList.filteredItems.length === 0;
                return empty && this._isTypeahead && !this.filterValue && !this.loading;
            };
        /**
         * @param {?} term
         * @return {?}
         */
        NgSelectComponent.prototype.filter = /**
         * @param {?} term
         * @return {?}
         */
            function (term) {
                this.filterValue = term;
                this.open();
                if (this._isTypeahead) {
                    this.typeahead.next(this.filterValue);
                }
                else {
                    this.itemsList.filter(this.filterValue);
                    if (this.isOpen) {
                        this.itemsList.markSelectedOrDefault(this.markFirst);
                    }
                }
                this.searchEvent.emit(term);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype.onInputFocus = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.focused) {
                    return;
                }
                this.element.classList.add('ng-select-focused');
                this.focusEvent.emit($event);
                this.focused = true;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype.onInputBlur = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.element.classList.remove('ng-select-focused');
                this.blurEvent.emit($event);
                if (!this.isOpen && !this.disabled) {
                    this._onTouched();
                }
                this.focused = false;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        NgSelectComponent.prototype.onItemHover = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item.disabled) {
                    return;
                }
                this.itemsList.markItem(item);
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.detectChanges = /**
         * @return {?}
         */
            function () {
                if (!( /** @type {?} */(this._cd)).destroyed) {
                    this._cd.detectChanges();
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype.updateDropdownPosition = /**
         * @return {?}
         */
            function () {
                if (this.dropdownPanel) {
                    this.dropdownPanel.updateDropdownPosition();
                }
            };
        /**
         * @param {?} items
         * @return {?}
         */
        NgSelectComponent.prototype._setItems = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                /** @type {?} */
                var firstItem = items[0];
                this.bindLabel = this.bindLabel || this._defaultLabel;
                this._primitive = isDefined(firstItem) ? !isObject(firstItem) : this._primitive;
                this.itemsList.setItems(items);
                if (items.length > 0 && this.hasValue) {
                    this.itemsList.mapSelectedItems();
                }
                if (this.isOpen && isDefined(this.filterValue) && !this._isTypeahead) {
                    this.itemsList.filter(this.filterValue);
                }
                if (this._isTypeahead || this.isOpen) {
                    this.itemsList.markSelectedOrDefault(this.markFirst);
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._setItemsFromNgOptions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var handleNgOptions = function (options) {
                    _this.items = options.map(function (option) {
                        return ({
                            $ngOptionValue: option.value,
                            $ngOptionLabel: option.elementRef.nativeElement.innerHTML,
                            disabled: option.disabled
                        });
                    });
                    _this.itemsList.setItems(_this.items);
                    if (_this.hasValue) {
                        _this.itemsList.mapSelectedItems();
                    }
                    _this.detectChanges();
                };
                /** @type {?} */
                var handleOptionChange = function () {
                    /** @type {?} */
                    var changedOrDestroyed = rxjs.merge(_this.ngOptions.changes, _this._destroy$);
                    rxjs.merge.apply(void 0, __spread(_this.ngOptions.map(function (option) { return option.stateChange$; }))).pipe(operators.takeUntil(changedOrDestroyed))
                        .subscribe(function (option) {
                        /** @type {?} */
                        var item = _this.itemsList.findItem(option.value);
                        item.disabled = option.disabled;
                        _this._cd.markForCheck();
                    });
                };
                this.ngOptions.changes
                    .pipe(operators.startWith(this.ngOptions), operators.takeUntil(this._destroy$), operators.filter(function (items) { return !!items.length; }))
                    .subscribe(function (options) {
                    _this.bindLabel = _this._defaultLabel;
                    handleNgOptions(options);
                    handleOptionChange();
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgSelectComponent.prototype._isValidWriteValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (!isDefined(value) || (this.multiple && value === '') || Array.isArray(value) && value.length === 0) {
                    return false;
                }
                /** @type {?} */
                var validateBinding = function (item) {
                    if (!isDefined(_this.compareWith) && isObject(item) && _this.bindValue) {
                        _this._console.warn("Binding object(" + JSON.stringify(item) + ") with bindValue is not allowed.");
                        return false;
                    }
                    return true;
                };
                if (this.multiple) {
                    if (!Array.isArray(value)) {
                        this._console.warn('Multiple select ngModel should be array.');
                        return false;
                    }
                    return value.every(function (item) { return validateBinding(item); });
                }
                else {
                    return validateBinding(value);
                }
            };
        /**
         * @param {?} ngModel
         * @return {?}
         */
        NgSelectComponent.prototype._handleWriteValue = /**
         * @param {?} ngModel
         * @return {?}
         */
            function (ngModel) {
                var _this = this;
                if (!this._isValidWriteValue(ngModel)) {
                    return;
                }
                /** @type {?} */
                var select = function (val) {
                    var _a;
                    /** @type {?} */
                    var item = _this.itemsList.findItem(val);
                    if (item) {
                        _this.itemsList.select(item);
                    }
                    else {
                        /** @type {?} */
                        var isValObject = isObject(val);
                        /** @type {?} */
                        var isPrimitive = !isValObject && !_this.bindValue;
                        if ((isValObject || isPrimitive)) {
                            _this.itemsList.select(_this.itemsList.mapItem(val, null));
                        }
                        else if (_this.bindValue) {
                            item = (_a = {},
                                _a[_this.bindLabel] = null,
                                _a[_this.bindValue] = val,
                                _a);
                            _this.itemsList.select(_this.itemsList.mapItem(item, null));
                        }
                    }
                };
                if (this.multiple) {
                    ( /** @type {?} */(ngModel)).forEach(function (item) { return select(item); });
                }
                else {
                    select(ngModel);
                }
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._handleKeyPresses = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.searchable) {
                    return;
                }
                this._keyPress$
                    .pipe(operators.takeUntil(this._destroy$), operators.tap(function (letter) { return _this._pressedKeys.push(letter); }), operators.debounceTime(200), operators.filter(function () { return _this._pressedKeys.length > 0; }), operators.map(function () { return _this._pressedKeys.join(''); }))
                    .subscribe(function (term) {
                    /** @type {?} */
                    var item = _this.itemsList.findByLabel(term);
                    if (item) {
                        if (_this.isOpen) {
                            _this.itemsList.markItem(item);
                            _this._cd.markForCheck();
                        }
                        else {
                            _this.select(item);
                        }
                    }
                    _this._pressedKeys = [];
                });
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._updateNgModel = /**
         * @return {?}
         */
            function () {
                var e_1, _a;
                /** @type {?} */
                var model = [];
                try {
                    for (var _b = __values(this.selectedItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (this.bindValue) {
                            /** @type {?} */
                            var value = null;
                            if (item.children) {
                                value = item.value[ /** @type {?} */(this.groupBy)];
                            }
                            else {
                                value = this.itemsList.resolveNested(item.value, this.bindValue);
                            }
                            model.push(value);
                        }
                        else {
                            model.push(item.value);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                /** @type {?} */
                var selected = this.selectedItems.map(function (x) { return x.value; });
                if (this.multiple) {
                    this._onChange(model);
                    this.changeEvent.emit(selected);
                }
                else {
                    this._onChange(isDefined(model[0]) ? model[0] : null);
                    this.changeEvent.emit(selected[0]);
                }
                this._cd.markForCheck();
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._clearSearch = /**
         * @return {?}
         */
            function () {
                if (!this.filterValue) {
                    return;
                }
                this.filterValue = null;
                this.itemsList.resetFilteredItems();
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._scrollToMarked = /**
         * @return {?}
         */
            function () {
                if (!this.isOpen || !this.dropdownPanel) {
                    return;
                }
                this.dropdownPanel.scrollInto(this.itemsList.markedItem);
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._scrollToTag = /**
         * @return {?}
         */
            function () {
                if (!this.isOpen || !this.dropdownPanel) {
                    return;
                }
                this.dropdownPanel.scrollIntoTag();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype._handleTab = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!this.isOpen) {
                    return;
                }
                if (this.selectOnTab) {
                    if (this.itemsList.markedItem) {
                        this.toggleItem(this.itemsList.markedItem);
                        $event.preventDefault();
                    }
                    else if (this.showAddTag) {
                        this.selectTag();
                        $event.preventDefault();
                    }
                    else {
                        this.close();
                    }
                }
                else {
                    this.close();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype._handleEnter = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.isOpen || this._manualOpen) {
                    if (this.itemsList.markedItem) {
                        this.toggleItem(this.itemsList.markedItem);
                    }
                    else if (this.showAddTag) {
                        this.selectTag();
                    }
                }
                else if (this.openOnEnter) {
                    this.open();
                }
                else {
                    return;
                }
                $event.preventDefault();
                $event.stopPropagation();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype._handleSpace = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.isOpen || this._manualOpen) {
                    return;
                }
                this.open();
                $event.preventDefault();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype._handleArrowDown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this._nextItemIsTag(+1)) {
                    this.itemsList.unmarkItem();
                    this._scrollToTag();
                }
                else {
                    this.itemsList.markNextItem();
                    this._scrollToMarked();
                }
                this.open();
                $event.preventDefault();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NgSelectComponent.prototype._handleArrowUp = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!this.isOpen) {
                    return;
                }
                if (this._nextItemIsTag(-1)) {
                    this.itemsList.unmarkItem();
                    this._scrollToTag();
                }
                else {
                    this.itemsList.markPreviousItem();
                    this._scrollToMarked();
                }
                $event.preventDefault();
            };
        /**
         * @param {?} nextStep
         * @return {?}
         */
        NgSelectComponent.prototype._nextItemIsTag = /**
         * @param {?} nextStep
         * @return {?}
         */
            function (nextStep) {
                /** @type {?} */
                var nextIndex = this.itemsList.markedIndex + nextStep;
                return this.addTag && this.filterValue
                    && this.itemsList.markedItem
                    && (nextIndex < 0 || nextIndex === this.itemsList.filteredItems.length);
            };
        /**
         * @return {?}
         */
        NgSelectComponent.prototype._handleBackspace = /**
         * @return {?}
         */
            function () {
                if (this.filterValue || !this.clearable || !this.clearOnBackspace || !this.hasValue) {
                    return;
                }
                if (this.multiple) {
                    this.unselect(this.itemsList.lastSelectedItem);
                }
                else {
                    this.clearModel();
                }
            };
        Object.defineProperty(NgSelectComponent.prototype, "_isTypeahead", {
            get: /**
             * @return {?}
             */ function () {
                return this.typeahead && this.typeahead.observers.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} config
         * @return {?}
         */
        NgSelectComponent.prototype._mergeGlobalConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this.placeholder = this.placeholder || config.placeholder;
                this.notFoundText = this.notFoundText || config.notFoundText;
                this.typeToSearchText = this.typeToSearchText || config.typeToSearchText;
                this.addTagText = this.addTagText || config.addTagText;
                this.loadingText = this.loadingText || config.loadingText;
                this.clearAllText = this.clearAllText || config.clearAllText;
                this.virtualScroll = isDefined(this.virtualScroll)
                    ? this.virtualScroll
                    : isDefined(config.disableVirtualScroll) ? !config.disableVirtualScroll : false;
                this.openOnEnter = isDefined(this.openOnEnter) ? this.openOnEnter : config.openOnEnter;
            };
        NgSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ng-select',
                        template: "<div (mousedown)=\"handleMousedown($event)\" [class.ng-has-value]=\"hasValue\" class=\"ng-select-container\">\n    <div class=\"ng-value-container\">\n        <div class=\"ng-placeholder\">{{placeholder}}</div>\n\n        <ng-container *ngIf=\"!multiLabelTemplate && selectedItems.length > 0\">\n            <div [class.ng-value-disabled]=\"item.disabled\" class=\"ng-value\" *ngFor=\"let item of selectedItems\">\n                <ng-template #defaultLabelTemplate>\n                    <span class=\"ng-value-icon left\" (click)=\"unselect(item);\" aria-hidden=\"true\">\u00D7</span>\n                    <span class=\"ng-value-label\">{{item.label}}</span>\n                </ng-template>\n\n                <ng-template\n                    [ngTemplateOutlet]=\"labelTemplate || defaultLabelTemplate\"\n                    [ngTemplateOutletContext]=\"{ item: item.value, clear: clearItem, label: item.label }\">\n                </ng-template>\n            </div>\n        </ng-container>\n\n        <ng-template *ngIf=\"multiLabelTemplate && selectedValues.length > 0\"\n                [ngTemplateOutlet]=\"multiLabelTemplate\"\n                [ngTemplateOutletContext]=\"{ items: selectedValues, clear: clearItem }\">\n        </ng-template>\n\n        <div class=\"ng-input\">\n            <input #filterInput\n                   type=\"text\"\n                   [attr.autocomplete]=\"labelForId ? 'off' : dropdownId\"\n                   [attr.id]=\"labelForId\"\n                   [attr.tabindex]=\"tabIndex\"\n                   [readOnly]=\"!searchable\"\n                   [disabled]=\"disabled\"\n                   [value]=\"filterValue ? filterValue : ''\"\n                   (input)=\"filter(filterInput.value)\"\n                   (focus)=\"onInputFocus($event)\"\n                   (blur)=\"onInputBlur($event)\"\n                   (change)=\"$event.stopPropagation()\"\n                   role=\"combobox\"\n                   [attr.aria-expanded]=\"isOpen\"\n                   [attr.aria-owns]=\"isOpen ? dropdownId : null\"\n                   [attr.aria-activedescendant]=\"isOpen ? itemsList?.markedItem?.htmlId : null\">\n        </div>\n    </div>\n\n    <div class=\"ng-spinner-loader\" *ngIf=\"loading\"></div>\n\n    <span *ngIf=\"showClear()\" class=\"ng-clear-wrapper\" title=\"{{clearAllText}}\">\n        <span class=\"ng-clear\" aria-hidden=\"true\">\u00D7</span>\n    </span>\n\n    <span class=\"ng-arrow-wrapper\">\n        <span class=\"ng-arrow\"></span>\n    </span>\n</div>\n\n<ng-dropdown-panel *ngIf=\"isOpen\"\n    class=\"ng-dropdown-panel\"\n    [virtualScroll]=\"virtualScroll\"\n    [bufferAmount]=\"bufferAmount\"\n    [appendTo]=\"appendTo\"\n    [position]=\"dropdownPosition\"\n    [headerTemplate]=\"headerTemplate\"\n    [footerTemplate]=\"footerTemplate\"\n    [filterValue]=\"filterValue\"\n    [items]=\"itemsList.filteredItems\"\n    [markedItem]=\"itemsList.markedItem\"\n    (update)=\"viewPortItems = $event\"\n    (scroll)=\"scroll.emit($event)\"\n    (scrollToEnd)=\"scrollToEnd.emit($event)\"\n    (outsideClick)=\"close()\"\n    [class.ng-select-multiple]=\"multiple\"\n    [ngClass]=\"classes\"\n    [id]=\"dropdownId\">\n\n    <ng-container>\n        <div class=\"ng-option\" [attr.role]=\"item.children ? 'group' : 'option'\" (click)=\"toggleItem(item)\" (mouseover)=\"onItemHover(item)\"\n                *ngFor=\"let item of viewPortItems\"\n                [class.ng-option-disabled]=\"item.disabled\"\n                [class.ng-option-selected]=\"item.selected\"\n                [class.ng-optgroup]=\"item.children\"\n                [class.ng-option]=\"!item.children\"\n                [class.ng-option-child]=\"!!item.parent\"\n                [class.ng-option-marked]=\"item === itemsList.markedItem\"\n                [attr.aria-selected]=\"item.selected\"\n                [attr.id]=\"item?.htmlId\">\n\n            <ng-template #defaultOptionTemplate>\n                <span class=\"ng-option-label\">{{item.label}}</span>\n            </ng-template>\n\n            <ng-template\n                [ngTemplateOutlet]=\"item.children ? (optgroupTemplate || defaultOptionTemplate) : (optionTemplate || defaultOptionTemplate)\"\n                [ngTemplateOutletContext]=\"{ item: item.value, item$:item, index: item.index, searchTerm: filterValue }\">\n            </ng-template>\n        </div>\n\n        <div class=\"ng-option\" [class.ng-option-marked]=\"!itemsList.markedItem\" (mouseover)=\"itemsList.unmarkItem()\" role=\"option\" (click)=\"selectTag()\" *ngIf=\"showAddTag\">\n            <ng-template #defaultTagTemplate>\n                <span><span class=\"ng-tag-label\">{{addTagText}}</span>\"{{filterValue}}\"</span>\n            </ng-template>\n\n            <ng-template\n                [ngTemplateOutlet]=\"tagTemplate || defaultTagTemplate\"\n                [ngTemplateOutletContext]=\"{ searchTerm: filterValue }\">\n            </ng-template>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"showNoItemsFound()\">\n        <ng-template #defaultNotFoundTemplate>\n            <div class=\"ng-option ng-option-disabled\">{{notFoundText}}</div>\n        </ng-template>\n\n        <ng-template\n            [ngTemplateOutlet]=\"notFoundTemplate || defaultNotFoundTemplate\"\n            [ngTemplateOutletContext]=\"{ searchTerm: filterValue }\">\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"showTypeToSearch()\">\n        <ng-template #defaultTypeToSearchTemplate>\n            <div class=\"ng-option ng-option-disabled\">{{typeToSearchText}}</div>\n        </ng-template>\n\n        <ng-template\n            [ngTemplateOutlet]=\"typeToSearchTemplate || defaultTypeToSearchTemplate\">\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"loading && itemsList.filteredItems.length === 0\">\n        <ng-template #defaultLoadingTextTemplate>\n            <div class=\"ng-option ng-option-disabled\">{{loadingText}}</div>\n        </ng-template>\n\n        <ng-template\n            [ngTemplateOutlet]=\"loadingTextTemplate || defaultLoadingTextTemplate\"\n            [ngTemplateOutletContext]=\"{ searchTerm: filterValue }\">\n        </ng-template>\n    </ng-container>\n\n</ng-dropdown-panel>\n",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return NgSelectComponent; }),
                                multi: true
                            }],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: {
                            'role': 'listbox',
                            'class': 'ng-select',
                            '[class.ng-select-single]': '!multiple',
                        },
                        styles: [".ng-select{position:relative;display:block;box-sizing:border-box}.ng-select div,.ng-select input,.ng-select span{box-sizing:border-box}.ng-select [hidden]{display:none}.ng-select.ng-select-searchable .ng-select-container .ng-value-container .ng-input{opacity:1}.ng-select.ng-select-opened .ng-select-container{z-index:1001}.ng-select.ng-select-disabled .ng-select-container .ng-value-container .ng-placeholder,.ng-select.ng-select-disabled .ng-select-container .ng-value-container .ng-value{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.ng-select.ng-select-disabled .ng-arrow-wrapper{cursor:default}.ng-select.ng-select-filtered .ng-placeholder{display:none}.ng-select .ng-select-container{color:#333;cursor:default;display:flex;outline:0;overflow:hidden;position:relative;width:100%}.ng-select .ng-select-container .ng-value-container{display:flex;flex:1}.ng-select .ng-select-container .ng-value-container .ng-input{opacity:0}.ng-select .ng-select-container .ng-value-container .ng-input>input{box-sizing:content-box;background:none;border:0;box-shadow:none;outline:0;cursor:default;width:100%}.ng-select .ng-select-container .ng-value-container .ng-input>input::-ms-clear{display:none}.ng-select .ng-select-container .ng-value-container .ng-input>input[readonly]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:0;padding:0}.ng-select.ng-select-single.ng-select-filtered .ng-select-container .ng-value-container .ng-value{visibility:hidden}.ng-select.ng-select-single .ng-select-container .ng-value-container,.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value .ng-value-icon{display:none}.ng-select.ng-select-single .ng-select-container .ng-value-container .ng-input{position:absolute;left:0;width:100%}.ng-select.ng-select-multiple.ng-select-disabled>.ng-select-container .ng-value-container .ng-value .ng-value-icon{display:none}.ng-select.ng-select-multiple .ng-select-container .ng-value-container{flex-wrap:wrap}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value{white-space:nowrap}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value.ng-value-disabled .ng-value-icon{display:none}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-value .ng-value-icon{cursor:pointer}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-input{flex:1;z-index:2}.ng-select.ng-select-multiple .ng-select-container .ng-value-container .ng-placeholder{position:absolute;z-index:1}.ng-select .ng-clear-wrapper{cursor:pointer;position:relative;width:17px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ng-select .ng-clear-wrapper .ng-clear{display:inline-block;font-size:18px;line-height:1;pointer-events:none}.ng-select .ng-spinner-loader{border-radius:50%;width:17px;height:17px;margin-right:5px;font-size:10px;position:relative;text-indent:-9999em;border-top:2px solid rgba(66,66,66,.2);border-right:2px solid rgba(66,66,66,.2);border-bottom:2px solid rgba(66,66,66,.2);border-left:2px solid #424242;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:.8s linear infinite load8;animation:.8s linear infinite load8}.ng-select .ng-spinner-loader:after{border-radius:50%;width:17px;height:17px}@-webkit-keyframes load8{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes load8{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.ng-select .ng-arrow-wrapper{cursor:pointer;position:relative;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ng-select .ng-arrow-wrapper .ng-arrow{pointer-events:none;display:inline-block;height:0;width:0;position:relative}.ng-dropdown-panel{box-sizing:border-box;position:absolute;opacity:0;width:100%;z-index:1050;-webkit-overflow-scrolling:touch}.ng-dropdown-panel .ng-dropdown-panel-items{display:block;height:auto;box-sizing:border-box;max-height:240px;overflow-y:auto}.ng-dropdown-panel .ng-dropdown-panel-items .ng-optgroup{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option{box-sizing:border-box;cursor:pointer;display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option .highlighted{font-weight:700;text-decoration:underline}.ng-dropdown-panel .ng-dropdown-panel-items .ng-option.disabled{cursor:default}.ng-dropdown-panel .scroll-host{overflow:hidden;overflow-y:auto;position:relative;display:block;-webkit-overflow-scrolling:touch}.ng-dropdown-panel .scrollable-content{top:0;left:0;width:100%;height:100%;position:absolute}.ng-dropdown-panel .total-padding{width:1px;opacity:0}"]
                    }] }
        ];
        /** @nocollapse */
        NgSelectComponent.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: i0.Attribute, args: ['class',] }] },
                { type: String, decorators: [{ type: i0.Attribute, args: ['tabindex',] }] },
                { type: undefined, decorators: [{ type: i0.Attribute, args: ['autofocus',] }] },
                { type: NgSelectConfig },
                { type: undefined, decorators: [{ type: i0.Inject, args: [SELECTION_MODEL_FACTORY,] }] },
                { type: i0.ElementRef },
                { type: i0.ChangeDetectorRef },
                { type: ConsoleService }
            ];
        };
        NgSelectComponent.propDecorators = {
            items: [{ type: i0.Input }],
            bindLabel: [{ type: i0.Input }],
            bindValue: [{ type: i0.Input }],
            clearable: [{ type: i0.Input }],
            markFirst: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            notFoundText: [{ type: i0.Input }],
            typeToSearchText: [{ type: i0.Input }],
            addTagText: [{ type: i0.Input }],
            loadingText: [{ type: i0.Input }],
            clearAllText: [{ type: i0.Input }],
            dropdownPosition: [{ type: i0.Input }],
            appendTo: [{ type: i0.Input }],
            loading: [{ type: i0.Input }],
            closeOnSelect: [{ type: i0.Input }],
            hideSelected: [{ type: i0.Input }],
            selectOnTab: [{ type: i0.Input }],
            openOnEnter: [{ type: i0.Input }],
            maxSelectedItems: [{ type: i0.Input }],
            groupBy: [{ type: i0.Input }],
            groupValue: [{ type: i0.Input }],
            bufferAmount: [{ type: i0.Input }],
            virtualScroll: [{ type: i0.Input }],
            selectableGroup: [{ type: i0.Input }],
            selectableGroupAsModel: [{ type: i0.Input }],
            searchFn: [{ type: i0.Input }],
            clearOnBackspace: [{ type: i0.Input }],
            labelForId: [{ type: i0.Input }],
            typeahead: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ng-select-typeahead',] }],
            multiple: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ng-select-multiple',] }],
            addTag: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ng-select-taggable',] }],
            searchable: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ng-select-searchable',] }],
            isOpen: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.ng-select-opened',] }],
            compareWith: [{ type: i0.Input }],
            clearSearchOnAdd: [{ type: i0.Input }],
            blurEvent: [{ type: i0.Output, args: ['blur',] }],
            focusEvent: [{ type: i0.Output, args: ['focus',] }],
            changeEvent: [{ type: i0.Output, args: ['change',] }],
            openEvent: [{ type: i0.Output, args: ['open',] }],
            closeEvent: [{ type: i0.Output, args: ['close',] }],
            searchEvent: [{ type: i0.Output, args: ['search',] }],
            clearEvent: [{ type: i0.Output, args: ['clear',] }],
            addEvent: [{ type: i0.Output, args: ['add',] }],
            removeEvent: [{ type: i0.Output, args: ['remove',] }],
            scroll: [{ type: i0.Output, args: ['scroll',] }],
            scrollToEnd: [{ type: i0.Output, args: ['scrollToEnd',] }],
            optionTemplate: [{ type: i0.ContentChild, args: [NgOptionTemplateDirective, { read: i0.TemplateRef },] }],
            optgroupTemplate: [{ type: i0.ContentChild, args: [NgOptgroupTemplateDirective, { read: i0.TemplateRef },] }],
            labelTemplate: [{ type: i0.ContentChild, args: [NgLabelTemplateDirective, { read: i0.TemplateRef },] }],
            multiLabelTemplate: [{ type: i0.ContentChild, args: [NgMultiLabelTemplateDirective, { read: i0.TemplateRef },] }],
            headerTemplate: [{ type: i0.ContentChild, args: [NgHeaderTemplateDirective, { read: i0.TemplateRef },] }],
            footerTemplate: [{ type: i0.ContentChild, args: [NgFooterTemplateDirective, { read: i0.TemplateRef },] }],
            notFoundTemplate: [{ type: i0.ContentChild, args: [NgNotFoundTemplateDirective, { read: i0.TemplateRef },] }],
            typeToSearchTemplate: [{ type: i0.ContentChild, args: [NgTypeToSearchTemplateDirective, { read: i0.TemplateRef },] }],
            loadingTextTemplate: [{ type: i0.ContentChild, args: [NgLoadingTextTemplateDirective, { read: i0.TemplateRef },] }],
            tagTemplate: [{ type: i0.ContentChild, args: [NgTagTemplateDirective, { read: i0.TemplateRef },] }],
            dropdownPanel: [{ type: i0.ViewChild, args: [i0.forwardRef(function () { return NgDropdownPanelComponent; }),] }],
            ngOptions: [{ type: i0.ContentChildren, args: [NgOptionComponent, { descendants: true },] }],
            filterInput: [{ type: i0.ViewChild, args: ['filterInput',] }],
            disabled: [{ type: i0.HostBinding, args: ['class.ng-select-disabled',] }],
            filtered: [{ type: i0.HostBinding, args: ['class.ng-select-filtered',] }],
            handleKeyDown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
        };
        return NgSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgOptionHighlightDirective = /** @class */ (function () {
        function NgOptionHighlightDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.element = this.elementRef.nativeElement;
        }
        /**
         * @return {?}
         */
        NgOptionHighlightDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this._canHighlight) {
                    this._highlightLabel();
                }
            };
        /**
         * @return {?}
         */
        NgOptionHighlightDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.label = this.element.innerHTML;
                if (this._canHighlight) {
                    this._highlightLabel();
                }
            };
        /**
         * @return {?}
         */
        NgOptionHighlightDirective.prototype._highlightLabel = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var label = this.label;
                if (!this.term) {
                    this._setInnerHtml(label);
                    return;
                }
                /** @type {?} */
                var indexOfTerm = stripSpecialChars(label)
                    .toLowerCase()
                    .indexOf(stripSpecialChars(this.term).toLowerCase());
                if (indexOfTerm > -1) {
                    this._setInnerHtml(label.substring(0, indexOfTerm)
                        + ("<span class=\"highlighted\">" + label.substr(indexOfTerm, this.term.length) + "</span>")
                        + label.substring(indexOfTerm + this.term.length, label.length));
                }
                else {
                    this._setInnerHtml(label);
                }
            };
        Object.defineProperty(NgOptionHighlightDirective.prototype, "_canHighlight", {
            get: /**
             * @return {?}
             */ function () {
                return isDefined(this.term) && isDefined(this.label);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} html
         * @return {?}
         */
        NgOptionHighlightDirective.prototype._setInnerHtml = /**
         * @param {?} html
         * @return {?}
         */
            function (html) {
                this.renderer.setProperty(this.elementRef.nativeElement, 'innerHTML', html);
            };
        NgOptionHighlightDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[ngOptionHighlight]'
                    },] }
        ];
        /** @nocollapse */
        NgOptionHighlightDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        NgOptionHighlightDirective.propDecorators = {
            term: [{ type: i0.Input, args: ['ngOptionHighlight',] }]
        };
        return NgOptionHighlightDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function DefaultSelectionModelFactory() {
        return new DefaultSelectionModel();
    }
    var DefaultSelectionModel = /** @class */ (function () {
        function DefaultSelectionModel() {
            this._selected = [];
        }
        Object.defineProperty(DefaultSelectionModel.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._selected;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} item
         * @param {?} multiple
         * @param {?} groupAsModel
         * @return {?}
         */
        DefaultSelectionModel.prototype.select = /**
         * @param {?} item
         * @param {?} multiple
         * @param {?} groupAsModel
         * @return {?}
         */
            function (item, multiple, groupAsModel) {
                item.selected = true;
                if (groupAsModel || !item.children) {
                    this._selected.push(item);
                }
                if (multiple) {
                    if (item.parent) {
                        /** @type {?} */
                        var childrenCount = item.parent.children.length;
                        /** @type {?} */
                        var selectedCount = item.parent.children.filter(function (x) { return x.selected; }).length;
                        item.parent.selected = childrenCount === selectedCount;
                    }
                    else if (item.children) {
                        this._setChildrenSelectedState(item.children, true);
                        this._removeChildren(item);
                        if (!groupAsModel) {
                            this._selected = __spread(this._selected, item.children);
                        }
                    }
                }
            };
        /**
         * @param {?} item
         * @param {?} multiple
         * @return {?}
         */
        DefaultSelectionModel.prototype.unselect = /**
         * @param {?} item
         * @param {?} multiple
         * @return {?}
         */
            function (item, multiple) {
                var _a;
                this._selected = this._selected.filter(function (x) { return x !== item; });
                item.selected = false;
                if (multiple) {
                    if (item.parent && item.parent.selected) {
                        /** @type {?} */
                        var children = item.parent.children;
                        this._removeParent(item.parent);
                        this._removeChildren(item.parent);
                        (_a = this._selected).push.apply(_a, __spread(children.filter(function (x) { return x !== item; })));
                        item.parent.selected = false;
                    }
                    else if (item.children) {
                        this._setChildrenSelectedState(item.children, false);
                        this._removeChildren(item);
                    }
                }
            };
        /**
         * @return {?}
         */
        DefaultSelectionModel.prototype.clear = /**
         * @return {?}
         */
            function () {
                this._selected = [];
            };
        /**
         * @param {?} children
         * @param {?} selected
         * @return {?}
         */
        DefaultSelectionModel.prototype._setChildrenSelectedState = /**
         * @param {?} children
         * @param {?} selected
         * @return {?}
         */
            function (children, selected) {
                children.forEach(function (x) { return x.selected = selected; });
            };
        /**
         * @param {?} parent
         * @return {?}
         */
        DefaultSelectionModel.prototype._removeChildren = /**
         * @param {?} parent
         * @return {?}
         */
            function (parent) {
                this._selected = this._selected.filter(function (x) { return x.parent !== parent; });
            };
        /**
         * @param {?} parent
         * @return {?}
         */
        DefaultSelectionModel.prototype._removeParent = /**
         * @param {?} parent
         * @return {?}
         */
            function (parent) {
                this._selected = this._selected.filter(function (x) { return x !== parent; });
            };
        return DefaultSelectionModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ɵ0 = DefaultSelectionModelFactory;
    var NgSelectModule = /** @class */ (function () {
        function NgSelectModule() {
        }
        NgSelectModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            NgDropdownPanelComponent,
                            NgOptionComponent,
                            NgSelectComponent,
                            NgOptionHighlightDirective,
                            NgOptgroupTemplateDirective,
                            NgOptionTemplateDirective,
                            NgLabelTemplateDirective,
                            NgMultiLabelTemplateDirective,
                            NgHeaderTemplateDirective,
                            NgFooterTemplateDirective,
                            NgNotFoundTemplateDirective,
                            NgTypeToSearchTemplateDirective,
                            NgLoadingTextTemplateDirective,
                            NgTagTemplateDirective
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [
                            NgSelectComponent,
                            NgOptionComponent,
                            NgOptionHighlightDirective,
                            NgOptgroupTemplateDirective,
                            NgOptionTemplateDirective,
                            NgLabelTemplateDirective,
                            NgMultiLabelTemplateDirective,
                            NgHeaderTemplateDirective,
                            NgFooterTemplateDirective,
                            NgNotFoundTemplateDirective,
                            NgTypeToSearchTemplateDirective,
                            NgLoadingTextTemplateDirective,
                            NgTagTemplateDirective
                        ],
                        providers: [
                            { provide: SELECTION_MODEL_FACTORY, useValue: ɵ0 }
                        ]
                    },] }
        ];
        return NgSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgSelectComponent = NgSelectComponent;
    exports.SELECTION_MODEL_FACTORY = SELECTION_MODEL_FACTORY;
    exports.NgSelectModule = NgSelectModule;
    exports.NgSelectConfig = NgSelectConfig;
    exports.ɵr = ConsoleService;
    exports.ɵn = NgDropdownPanelComponent;
    exports.ɵs = NgOptionHighlightDirective;
    exports.ɵq = NgOptionComponent;
    exports.ɵi = NgFooterTemplateDirective;
    exports.ɵh = NgHeaderTemplateDirective;
    exports.ɵf = NgLabelTemplateDirective;
    exports.ɵl = NgLoadingTextTemplateDirective;
    exports.ɵg = NgMultiLabelTemplateDirective;
    exports.ɵj = NgNotFoundTemplateDirective;
    exports.ɵe = NgOptgroupTemplateDirective;
    exports.ɵd = NgOptionTemplateDirective;
    exports.ɵm = NgTagTemplateDirective;
    exports.ɵk = NgTypeToSearchTemplateDirective;
    exports.ɵc = DefaultSelectionModel;
    exports.ɵb = DefaultSelectionModelFactory;
    exports.ɵo = VirtualScrollService;
    exports.ɵp = WindowService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,